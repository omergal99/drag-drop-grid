{"version":3,"sources":["pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","useState","id","name","bcColor","itemArr","setItemArr","currMovingItemId","setCurrMovingItemId","handleDragStart","ev","target","getAttribute","handleDragEnter","switchWithItemId","currMovingIdx","findIndex","item","currOnIdx","replaceTwoIndexInArray","handleDragOver","preventDefault","handleDragEnd","arr","fromIndex","toIndex","newArr","splice","list","map","isDragging","className","key","draggable","data-drag","style","backgroundColor","onDragStart","onDragEnter","onDragOver","onDragEnd","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAmEeA,MAhEf,WAAiB,IAAD,EAEgBC,mBAC5B,CACE,CAAEC,GAAI,SAAUC,KAAM,SAAUC,QAAS,WACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,WACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,WACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,WACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,SACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,UACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,WACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,WACzC,CAAEF,GAAI,SAAUC,KAAM,SAAUC,QAAS,WACzC,CAAEF,GAAI,UAAWC,KAAM,UAAWC,QAAS,WAC3C,CAAEF,GAAI,UAAWC,KAAM,UAAWC,QAAS,WAC3C,CAAEF,GAAI,UAAWC,KAAM,UAAWC,QAAS,WAC3C,CAAEF,GAAI,UAAWC,KAAM,UAAWC,QAAS,UAC3C,CAAEF,GAAI,UAAWC,KAAM,UAAWC,QAAS,UAC3C,CAAEF,GAAI,UAAWC,KAAM,UAAWC,QAAS,aAlBjC,mBAEPC,EAFO,KAEEC,EAFF,OAqBkCL,mBAAS,MArB3C,mBAqBPM,EArBO,KAqBWC,EArBX,KAuBRC,EAAkB,SAAAC,GACtBF,EAAoBE,EAAGC,OAAOC,aAAa,eAEvCC,EAAkB,SAAAH,GACtB,IAAMI,EAAmBJ,EAAGC,OAAOC,aAAa,aAChD,GAAIE,GAAoBA,IAAqBP,EAAkB,CAC7D,IAAMQ,EAAgBV,EAAQW,WAAU,SAAAC,GAAI,OAAIA,EAAKf,KAAOK,KACtDW,EAAYb,EAAQW,WAAU,SAAAC,GAAI,OAAIA,EAAKf,KAAOY,KACxDR,EAAWa,EAAuBd,EAASU,EAAeG,MAGxDE,EAAiB,SAAAV,GAAE,OAAIA,EAAGW,kBAC1BC,EAAgB,kBAAMd,EAAoB,OAE1CW,EAAyB,SAACI,EAAKC,EAAWC,GAC9C,IAAIC,EAAM,YAAOH,GAGjB,OAFAG,EAAOC,OAAOH,EAAW,GACzBE,EAAOC,OAAOF,EAAS,EAAGF,EAAIC,IACvBE,GAGHE,EAAOvB,EAAQwB,KAAI,SAAAZ,GACvB,IAAMa,EAAavB,IAAqBU,EAAKf,GAC7C,OAAO,yBAAK6B,UAAS,eAAUD,EAAa,WAAa,IAAME,IAAKf,EAAKf,GACvE+B,UAAU,OACVC,YAAWjB,EAAKf,GAAIiC,MAAO,CAAEC,gBAAgB,GAAD,OAAKnB,EAAKb,UACtDiC,YAAa5B,EAAiB6B,YAAazB,EAAiB0B,WAAYnB,EAAgBoB,UAAWlB,GACnG,8BAAOL,EAAKd,UAIhB,OACE,yBAAK4B,UAAU,QACb,2DACA,yBAAKA,UAAU,kBACZH,KCjDMa,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2921cea6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nfunction Main() {\r\n\r\n  const [itemArr, setItemArr] = useState(\r\n    [\r\n      { id: 'item-1', name: 'Item 1', bcColor: '#1d5cb3' },\r\n      { id: 'item-2', name: 'Item 2', bcColor: '#2a6948' },\r\n      { id: 'item-3', name: 'Item 3', bcColor: '#b72828' },\r\n      { id: 'item-4', name: 'Item 4', bcColor: '#8c8c4a' },\r\n      { id: 'item-5', name: 'Item 5', bcColor: 'brown' },\r\n      { id: 'item-6', name: 'Item 6', bcColor: 'purple' },\r\n      { id: 'item-7', name: 'Item 7', bcColor: '#a74e5d' },\r\n      { id: 'item-8', name: 'Item 8', bcColor: '#245869' },\r\n      { id: 'item-9', name: 'Item 9', bcColor: '#595d49' },\r\n      { id: 'item-10', name: 'Item 10', bcColor: '#5bc3de' },\r\n      { id: 'item-11', name: 'Item 11', bcColor: '#1c3556' },\r\n      { id: 'item-12', name: 'Item 12', bcColor: '#394c12' },\r\n      { id: 'item-13', name: 'Item 13', bcColor: 'orange' },\r\n      { id: 'item-14', name: 'Item 14', bcColor: 'purple' },\r\n      { id: 'item-15', name: 'Item 15', bcColor: '#921149' }\r\n    ]\r\n  );\r\n  const [currMovingItemId, setCurrMovingItemId] = useState(null);\r\n\r\n  const handleDragStart = ev => {\r\n    setCurrMovingItemId(ev.target.getAttribute('data-drag'));\r\n  }\r\n  const handleDragEnter = ev => {\r\n    const switchWithItemId = ev.target.getAttribute('data-drag');\r\n    if (switchWithItemId && switchWithItemId !== currMovingItemId) {\r\n      const currMovingIdx = itemArr.findIndex(item => item.id === currMovingItemId);\r\n      const currOnIdx = itemArr.findIndex(item => item.id === switchWithItemId);\r\n      setItemArr(replaceTwoIndexInArray(itemArr, currMovingIdx, currOnIdx));\r\n    }\r\n  };\r\n  const handleDragOver = ev => ev.preventDefault();\r\n  const handleDragEnd = () => setCurrMovingItemId(null);\r\n\r\n  const replaceTwoIndexInArray = (arr, fromIndex, toIndex) => {\r\n    let newArr = [...arr];\r\n    newArr.splice(fromIndex, 1);\r\n    newArr.splice(toIndex, 0, arr[fromIndex]);\r\n    return newArr;\r\n  }\r\n\r\n  const list = itemArr.map(item => {\r\n    const isDragging = currMovingItemId === item.id;\r\n    return <div className={`item ${isDragging ? 'dragging' : ''}`} key={item.id}\r\n      draggable=\"true\"\r\n      data-drag={item.id} style={{ backgroundColor: `${item.bcColor}` }}\r\n      onDragStart={handleDragStart} onDragEnter={handleDragEnter} onDragOver={handleDragOver} onDragEnd={handleDragEnd}>\r\n      <span>{item.name}</span>\r\n    </div>\r\n  })\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      <h2>Dragging with drag listener</h2>\r\n      <div className=\"grid-drag-drop\">\r\n        {list}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './assets/css/App.scss';\nimport Main from './pages/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}